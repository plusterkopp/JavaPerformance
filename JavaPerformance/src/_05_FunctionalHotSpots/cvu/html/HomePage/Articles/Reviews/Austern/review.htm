<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
   <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
   <meta name="Description" content="Expert reviews of new and important books for C++ developers.">
   <meta name="Keywords" content="Book, Reviews, C++, Visual C++, Training Education">
   <meta name="Generator" content="Microsoft Word 97">
   <meta name="GENERATOR" content="Mozilla/4.79 [en] (Windows NT 5.0; U) [Netscape]">
   <meta name="Author" content="Angelika Langer">
   <meta name="KeyWords" content="Book, Reviews, C++, Visual C++, Training Education">
   <title>Book Review  -  Generic Programming and the STL</title>
</head>
<body text="#000000" bgcolor="#FFFFFF" link="#113E79" vlink="#677DAD" alink="#008080">
<a NAME="BookReviewAustern"></a>
<table BORDER=0 CELLSPACING=0 CELLPADDING=0 WIDTH="489" >
<tr>
<td>&nbsp;</td>

<td>&nbsp;</td>

<td VALIGN=BOTTOM WIDTH="189"><img SRC="../../../Images/czonesub.gif" NOSAVE BORDER=0 height=33 width=106 align=LEFT></td>

<td WIDTH="50%">
<table BORDER=0 CELLSPACING=0 CELLPADDING=0 WIDTH="643" >
<tr>
<td VALIGN=BOTTOM WIDTH="300"><b><sub><font face="Verdana"><font color="#FF0037"><font size=+3>&nbsp;
Book Review</font></font></font></sub></b> <b><i><sub><font face="Verdana"><font color="#232990"><font size=+1>of
the week</font></font></font></sub></i></b></td>
</tr>

<tr>
<td VALIGN=BOTTOM WIDTH="387"><img SRC="../../../Images/czonesubrule.gif" VSPACE=4 NOSAVE height=2 width=380></td>
</tr>
</table>
&nbsp;</td>
</tr>
</table>

<table BORDER=0 CELLSPACING=0 CELLPADDING=0 >
<tr>
<td VALIGN=TOP>
<table BORDER=0 WIDTH="100%" >
<tr>
<td VALIGN=TOP WIDTH="10%">
<center><table BORDER=0 WIDTH="100%" >
<tr>
<td>&nbsp;</td>

<td VALIGN=TOP WIDTH="65"><img SRC="0201309564.gif" NOSAVE height=140 width=105></td>
</tr>

<tr>
<td>&nbsp;</td>

<td VALIGN=TOP WIDTH="65"><b><font face="Verdana"><font size=-2>Generic
Programming and the STL: Using and Extending the C++ Standard Template
L&nbsp;</font></font></b></td>
</tr>

<tr>
<td>&nbsp;</td>

<td VALIGN=TOP WIDTH="65"><i><font face="Verdana"><font size=-2>By Matthew
H. Austern&nbsp;</font></font></i></td>
</tr>

<tr>
<td>&nbsp;</td>

<td VALIGN=TOP WIDTH="65"><font face="Verdana"><font size=-2>Reading,MA:Addison-Wesley
Longman&nbsp;</font></font></td>
</tr>

<tr>
<td>&nbsp;</td>

<td VALIGN=TOP WIDTH="65"><font face="Verdana"><font size=-2>ISBN 0-201-30956-4&nbsp;</font></font></td>
</tr>

<tr>
<td>&nbsp;</td>

<td VALIGN=TOP WIDTH="65"><font face="Verdana"><font size=-2>608 pages&nbsp;</font></font></td>
</tr>

<tr>
<td>&nbsp;</td>

<td VALIGN=TOP WIDTH="65"></td>
</tr>

<tr>
<td>&nbsp;</td>

<td VALIGN=TOP WIDTH="65"><font face="Verdana"><font size=-2>Price: $49.95&nbsp;</font></font></td>
</tr>

<tr>
<td WIDTH="10">&nbsp;</td>

<td VALIGN=TOP WIDTH="65"><i><font face="Verdana"><font size=-2>(Reviewed
2/1/99)&nbsp;</font></font></i></td>
</tr>
</table></center>
&nbsp;</td>

<td VALIGN=TOP WIDTH="100%">
<center><table BORDER=0 WIDTH="90%" >
<tr>
<td VALIGN=TOP WIDTH="60%"><b><font face="Verdana"><font color="#232990"><font size=+2>If
You Want to Understand, Use, and Extend the STL, Read This Book&nbsp;</font></font></font></b></td>
</tr>

<tr>
<td WIDTH="60%"><i><font face="Verdana"><font size=-1>Goes beyond explaining
what the predefined STL components have to offer; delves into the systematic
specification of type requirements behind the STL</font></font></i></td>
</tr>

<tr>
<td>&nbsp;</td>
</tr>

<tr>
<td VALIGN=TOP><font face="Verdana"><font color="#333399"><font size=+2>T</font></font><font size=-1>his
is not a book about object-oriented programming." With this striking characterization,
Matthew Austern's <i>Generic Programming and the STL</i> begins. Moreover,
this is not a book about plain usage of the STL, either. In Austern's opinion,
"To use the STL is to extend it." Rather than demonstrating how to use
the STL containers and algorithms, the author aims to introduce the reader
to a novel programming paradigm—generic programming—of which the STL is
an example. He sees the STL not just as a collection of useful components,
which it is, but beyond that as an extensible framework of generic software
components. In this book, the STL is presented as a library of abstract
concepts. As readers, we gain an understanding of the ideas behind the
STL, which enables us to extend the framework and write our own STL-compliant
classes and algorithms.</font></font>
<p><font face="Verdana"><font size=-1>&nbsp;What is generic programming
about? Every programming paradigm is based on a specific kind of abstraction
that distinguishes it from other paradigms. For instance, the abstraction
supported by most contemporary programming languages is that of a subroutine
(or procedure or function): You can use a subroutine without knowing anything
about its implementation. Another abstraction is that of abstract data
types: You can manipulate and even create values without depending on the
actual representation of the data; only the interface is important. Object-oriented
programming adds another layer of abstraction by supporting hierarchies
of polymorphic data types: You can refer to a value and manipulate it without
needing to specify its exact type. In this way you can write a single function
that will operate on a number of types within an inheritance hierarchy.</font></font>
<p><font face="Verdana"><font size=-1>&nbsp;The new abstraction that characterizes
generic programming is that of a set of requirements on data types. You
can write general and reusable functions (more precisely: function templates)
that are independent of the data types they operate on. It is a technique
comparable to functions that operate on polymorphic types in an inheritance
hierarchy. The notion of type requirements comes into play with the template
language feature in C++. If you've been programming with templates, you
will have noticed that each time you define a template that takes a type
argument you make assumptions about the operations that the type must provide.
Most often, we do not formally specify the set of requirements to such
a template type argument, because C++ does not have any specific language
features to express such requirements on data types. And here the is book
most fascinating: It is the first publication we've seen that recognizes
the need for a systematic approach to template programming. A formalized
specification of type requirements—Austern calls them "concepts"—is important
for intense use of templates.</font></font>
<p><font face="Verdana"><font size=-1>&nbsp;The STL is an example of the
generic programming paradigm. It is a collection of predefined class and
function templates, but it is also a collection of "concepts" that specify
how the STL components collaborate and how the STL can be extended. Without
doubt, this book is unique because of the approach it takes in describing
the STL in terms of "concepts." The plain use of STL containers and algorithms
is described elsewhere; all STL books published so far explain what the
predefined STL components have to offer. None of them provides much information
about the systematic specification of type requirements behind the STL.
This book takes the reader one step further. It describes all predefined
components in the STL, but it explains them as manifestations of the abstract
concepts. If you just want to use the predefined STL components, this is
not the optimal book for you. If you strive for a thorough understanding
of the STL and want to use it intensively and intend to extend it, you'll
find all necessary information here.</font></font>
<p><font face="Verdana"><font size=-1>&nbsp;In sum: the reader will learn
a lot about the underlying concepts of the STL and will close the book
having gained valuable new insights into the nature of template programming
in general.&nbsp;</font></font>
<p><i><font face="Verdana"><font size=-1><b>Angelika Langer</b> develops
and teaches classes on advanced C++, STL, multithreading, internationalization,
and Java. She has served on the ANSI/ISO C++ Committee since 1993. <b>Klaus
Kreft</b> is a software architect and consultant with more than a decade
of experience in industrial software development. He works for Siemens
Business Services in Germany. Langer and Kreft are working on a book about
standard C++ iostreams and locales and are columnists for </font></font></i><font face="Verdana"><font size=-1>C++
Report<i>.&nbsp;</i></font></font></td>
</tr>
</table></center>
&nbsp;</td>
</tr>
</table>
&nbsp;</td>
</tr>
</table>

</body>
</html>
