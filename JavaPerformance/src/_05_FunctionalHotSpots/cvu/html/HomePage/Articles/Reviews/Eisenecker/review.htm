<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
   <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
   <meta name="Description" content="Interesting Treatise on a New Programming Paradigm">
   <meta name="Keywords" content="Book, Reviews, C++, Visual C++, Training Education">
   <meta name="Generator" content="Microsoft Word 97">
   <meta name="GENERATOR" content="Mozilla/4.79 [en] (Windows NT 5.0; U) [Netscape]">
   <meta name="Author" content="Angelika Langer & Klaus Kreft">
   <meta name="KeyWords" content="Book, Reviews, C++, Java, Training Education, OOP">
   <title>Book Review  -  Generative Programming</title>
</head>
<body text="#000000" bgcolor="#FFFFFF" link="#113E79" vlink="#677DAD" alink="#008080">
<a NAME="BookReviewEisenecker"></a>
<table BORDER=0 CELLSPACING=0 CELLPADDING=0 >
<tr>
<td VALIGN=TOP>
<table BORDER=0 CELLSPACING=0 CELLPADDING=0 WIDTH="489" >
<tr>
<td>&nbsp;</td>

<td>&nbsp;</td>

<td VALIGN=BOTTOM WIDTH="189"><img SRC="../../../Images/czonesub.gif" NOSAVE BORDER=0 height=33 width=106 align=LEFT></td>

<td WIDTH="50%">
<table BORDER=0 CELLSPACING=0 CELLPADDING=0 WIDTH="387" >
<tr>
<td VALIGN=BOTTOM><b><sub><font face="Verdana"><font color="#FF0037"><font size=+3>&nbsp;
Book Review</font></font></font></sub></b> <b><i><sub><font face="Verdana"><font color="#232990"><font size=+1>of
the week</font></font></font></sub></i></b></td>
</tr>

<tr>
<td VALIGN=BOTTOM WIDTH="387"><img SRC="../../../Images/czonesubrule.gif" VSPACE=4 NOSAVE height=2 width=380></td>
</tr>
</table>
&nbsp;</td>
</tr>
</table>

<table BORDER=0 WIDTH="100%" >
<tr>
<td VALIGN=TOP WIDTH="10%">
<center><table BORDER=0 WIDTH="100%" >
<tr>
<td>&nbsp;</td>

<td VALIGN=TOP WIDTH="65"><img SRC="0201309777.gif" NOSAVE height=151 width=120></td>
</tr>

<tr>
<td>&nbsp;</td>

<td VALIGN=TOP WIDTH="65"><b><font face="Verdana"><font size=-2>Generative
Programming: Methods, Tools, and Applications&nbsp;</font></font></b></td>
</tr>

<tr>
<td>&nbsp;</td>

<td VALIGN=TOP WIDTH="65"><i><font face="Verdana"><font size=-2>By Krzysztof
Czarnecki and Ulrich W. Eisenecker</font></font></i></td>
</tr>

<tr>
<td>&nbsp;</td>

<td VALIGN=TOP WIDTH="65"><font face="Verdana"><font size=-2>Reading,MA:Addison-Wesley
Longman&nbsp;</font></font></td>
</tr>

<tr>
<td>&nbsp;</td>

<td VALIGN=TOP WIDTH="65"><font face="Verdana"><font size=-2>ISBN 0201309777&nbsp;</font></font></td>
</tr>

<tr>
<td>&nbsp;</td>

<td VALIGN=TOP WIDTH="65"><font face="Verdana"><font size=-2>832 pages&nbsp;</font></font></td>
</tr>

<tr>
<td>&nbsp;</td>

<td VALIGN=TOP WIDTH="65"></td>
</tr>

<tr>
<td>&nbsp;</td>

<td VALIGN=TOP WIDTH="65"><font face="Verdana"><font size=-2>Price: $44.95</font></font></td>
</tr>

<tr>
<td WIDTH="10">&nbsp;</td>

<td VALIGN=TOP WIDTH="65"><i><font face="Verdana"><font size=-2>(Reviewed
7/14/00)&nbsp;</font></font></i></td>
</tr>
</table></center>
&nbsp;</td>

<td VALIGN=TOP WIDTH="100%">
<center><table BORDER=0 WIDTH="90%" >
<tr>
<td VALIGN=TOP WIDTH="60%"><b><font face="Verdana"><font color="#232990"><font size=+2>Interesting
Treatise on a New Programming Paradigm&nbsp;</font></font></font></b></td>
</tr>

<tr>
<td WIDTH="60%"><i><font face="Verdana"><font size=-1>Book covers modeling
software families instead of one-of-kind systems</font></font></i></td>
</tr>

<tr>
<td>&nbsp;</td>
</tr>

<tr>
<td VALIGN=TOP><font face="Verdana, Helvetica, Arial, sans-serif"><font color="#333399"><font size=+2>F</font></font><font size=-1>irst
of all, let's clarify what <i>Generative Programming: Methods, Tolls, and
Applications</i> is about. What is generative programming (GP)? The authors
it as "a software engineering paradigm based on modeling software system
families such that, given a particular requirements specification, a highly
customized and optimized intermediate or end-product can be automatically
manufactured on demand from elementary, reusable implementation components
by means of configuration knowledge."&nbsp;</font></font>
<p><font face="Verdana, Helvetica, Arial, sans-serif"><font size=-1>In
plain English: The focus is on system families rather than one-of-a-kind
systems. Instead of building a single software system as a solution to
a certain problem, generative programming is about designing a system from
which configurable solutions can be generated based on an assembly plan
or a configuration specification. The problem with current software development
processes is that we usually end up with a concrete software system, but
don't know how we got there. Most of the design knowledge is lost, which
renders software maintenance, evolution, and reuse rather difficult and
costly. In generative programming, the idea is capturing as much of the
production knowledge as possible. Hence GP is about designing and implementing
a generative domain model (preparing for reuse) and designing and implementing
another model for using the generative model to produce concrete systems
(the actual reuse).&nbsp;</font></font>
<p><font face="Verdana, Helvetica, Arial, sans-serif"><font size=-1>None
of that sounds overly familiar, doesn't it? Well, it can't. GP is a new
paradigm and this book (or at least part of it) is the result of a research
project. Hardly anything of what the authors talk about is common practice
today, but it might be in the future. In any case, <i>Generative Programming:
Methods, Tools, and Applications</i> is thought-provoking and interesting
reading for those who do not mind being confronted with new ideas and being
overwhelmed with detailed studies of all kinds of aspects related to GP.&nbsp;</font></font>
<p><font face="Verdana, Helvetica, Arial, sans-serif"><font size=-1>Let's
see what the authors cover:&nbsp;</font></font>
<ul>
<li>
<font face="Verdana, Helvetica, Arial, sans-serif"><font size=-1><b>Analysis
and Design.</b> Because GP is about designing and implementing a generative
domain model, the first part of the book is devoted to analysis and design
methods, including domain analysis (determining the scope of the software
system families of interest) and how it relates to object-oriented analysis
and design, and feature modeling (investigating commonalities and variation
among family members).</font></font></li>

<li>
<font face="Verdana, Helvetica, Arial, sans-serif"><font size=-1><b>Implementation.</b>
The second and major part is about implementing the system family model.
Although the authors include a discussion of implementation techniques
using all conceivable programming languages, they clearly emphasize C++
programming techniques. The chapters on generic programming, component-oriented
template-based C++ programming techniques, and static metaprogramming in
C++ are among the best coverage of modern and advanced template programming
techniques that we've seen so far. Indeed, the chapter on metaprogramming
impressively demonstrates the potential but also the limitations of template
metaprogramming.&nbsp;</font></font></li>

<br>&nbsp;
<p>&nbsp;
<br>&nbsp;
<br>&nbsp;
<br>&nbsp;
<br>&nbsp;
<br>&nbsp;
<br>&nbsp;
<p><font face="Verdana, Helvetica, Arial, sans-serif"><font size=-1>In
stark contrast, there is a chapter about Intentional Programming, an extendible
programming environment developed at Microsoft that allows you to load
extension libraries to add domain-specific programming language extensions
as needed for a given application. Extension libraries can extend the editor,
debugger, etc., and provide an ideal basis for metaprogramming support.</font></font>
<li>
<font face="Verdana, Helvetica, Arial, sans-serif"><font size=-1><b>Application
Examples.</b> The third part provides concrete examples of applied generative
programming—all using C++ as an implementation language, heavily using
templates. The examples guide you through all stages of the generative
programming process from domain analysis and feature modeling over domain
design to implementing components, design of domain-specific languages,
and implementation of generators. It's all done in C++, and it looks weird,
but the third example of a matrix computation library comes close to industrial-strength
numeric libraries that exist in practice.&nbsp;</font></font></li>
</ul>
<font face="Verdana, Helvetica, Arial, sans-serif"><font size=-1>However,
high-speed numeric computations are not every programmer's greatest concern.
So, what's in it for us normal software engineers? The sections about domain
analysis and feature modeling are certainly interesting to those involved
in analysis and design of software systems. The chapters about C++ programming
will, without a doubt, broaden your understanding of template programming.
There is an interesting section (unfortunately rather short) about implementing
design patterns using C++ templates—the kind of stuff you might want to
incorporate into your day-to-day work. The rest of the book is just interesting
reading: very sound, very detailed, probably comprehensive (can't judge,
we're not researchers), maybe academic at times, but by and large valuable,
because it never hurts to prepare yourself for potential, future paradigm
shifts.&nbsp;</font></font>
<p><i><font face="Verdana, Helvetica, Arial, sans-serif"><font size=-1><b>Angelika
Langer</b> develops and teaches classes on advanced C++, STL, multithreading,
internationalization, and Java. She served on the ANSI/ISO C++ Committee
from 1993 to 1998. <b>Klaus Kreft</b> is a software architect and consultant
with 15+ years of experience in industrial software development. He works
for Siemens Business Services in Germany. Langer and Kreft are authors
of "Standard C++ IOStreams and Locales: Advanced Programmer's Guide and
Reference" (Addison-Wesley, 1999) and are columnists for <a href="http://www.creport.com/" target="_blank">C++
Report</a> magazine.&nbsp;</font></font></i></td>
</tr>
</table></center>
&nbsp;</td>
</tr>
</table>
&nbsp;&nbsp;</td>
</tr>
</table>

</body>
</html>
