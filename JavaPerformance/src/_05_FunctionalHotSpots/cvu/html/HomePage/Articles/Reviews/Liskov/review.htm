<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
   <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
   <meta name="Generator" content="Microsoft Word 97">
   <meta name="GENERATOR" content="Mozilla/4.79 [en] (Windows NT 5.0; U) [Netscape]">
   <meta name="Author" content="Angelika Langer & Klaus Kreft">
   <title>Book Review  -  Program Development in Java</title>
</head>
<body text="#000000" bgcolor="#FFFFFF" link="#113E79" vlink="#677DAD" alink="#008080">
<a NAME="BookReviewLiskov"></a>
<table BORDER=0 CELLSPACING=0 CELLPADDING=0 WIDTH="489" >
<tr>
<td>&nbsp;</td>

<td>&nbsp;</td>

<td VALIGN=BOTTOM WIDTH="122"><img SRC="../../../Images/javazonesub.gif" NOSAVE height=33 width=122 align=LEFT></td>

<td WIDTH="50%">
<table BORDER=0 CELLSPACING=0 CELLPADDING=0 WIDTH="594" >
<tr>
<td VALIGN=BOTTOM WIDTH="300"><b><sub><font face="Verdana"><font color="#FF0037"><font size=+3>&nbsp;
Book Review</font></font></font></sub></b> <b><i><sub><font face="Verdana"><font color="#996666"><font size=+1>of
the week</font></font></font></sub></i></b></td>
</tr>

<tr>
<td VALIGN=BOTTOM WIDTH="387"><img SRC="../../../Images/javazonesubrule.gif" VSPACE=4 NOSAVE height=2 width=364></td>
</tr>
</table>
&nbsp;</td>
</tr>
</table>

<table BORDER=0 WIDTH="100%" >
<tr>
<td VALIGN=TOP WIDTH="10%">
<center><table BORDER=0 WIDTH="100%" >
<tr>
<td>&nbsp;</td>

<td VALIGN=TOP WIDTH="65"><img SRC="0201657686.jpg" NOSAVE height=158 width=120></td>
</tr>

<tr>
<td>&nbsp;</td>

<td VALIGN=TOP WIDTH="65"><b><font face="Verdana"><font size=-2>Program
Development in Java: Abstraction, Specification &amp; Object-Oriented Design</font></font></b></td>
</tr>

<tr>
<td>&nbsp;</td>

<td VALIGN=TOP WIDTH="65"><i><font face="Verdana"><font size=-2>By Barbara
Liskov with John Guttag</font></font></i></td>
</tr>

<tr>
<td>&nbsp;</td>

<td VALIGN=TOP WIDTH="65"><font face="Verdana"><font size=-2>Reading,MA:Addison-Wesley&nbsp;</font></font></td>
</tr>

<tr>
<td>&nbsp;</td>

<td VALIGN=TOP WIDTH="65"><font face="Verdana"><font size=-2>ISBN 0201657686</font></font></td>
</tr>

<tr>
<td>&nbsp;</td>

<td VALIGN=TOP WIDTH="65"><font face="Verdana"><font size=-2>446 pages</font></font></td>
</tr>

<tr>
<td>&nbsp;</td>

<td VALIGN=TOP WIDTH="65"></td>
</tr>

<tr>
<td>&nbsp;</td>

<td VALIGN=TOP WIDTH="65"><font face="Verdana"><font size=-2>Price: $49.95</font></font></td>
</tr>

<tr>
<td></td>

<td><font face="Verdana"><font size=-2>(Reviewed 5/1/01)</font></font></td>
</tr>
</table></center>
&nbsp;</td>

<td VALIGN=TOP WIDTH="100%">
<center><table BORDER=0 WIDTH="90%" >
<tr>
<td VALIGN=TOP WIDTH="60%"><b><font face="Verdana"><font color="#996666"><font size=+2>Excellent
Overview of Abstraction, Design, and Object-Oriented Principles&nbsp;</font></font></font></b></td>
</tr>

<tr>
<td WIDTH="60%"><i><font face="Verdana"><font size=-1>For computer professionals
who want to improve their knowledge of modular, object-oriented design</font></font></i></td>
</tr>

<tr>
<td VALIGN=TOP>
<br><font face="Verdana, Helvetica, Arial, sans-serif"><font color="#333399"><font size=+2>B</font></font><font size=-1>arbara
Liskov and John Guttag's book has a somewhat misleading title. <i>Program
Development in Java</i> suggests that it provides an introduction to the
Java programming language. Nothing could be further from the truth. This
is <i>not</i> yet another indistinguishable introduction to Java. It's
a really good book on abstraction and program design.&nbsp;</font></font>
<p><font face="Verdana, Helvetica, Arial, sans-serif"><font size=-1>In
fact, the subtitle "Abstraction, Specification, and Object-Oriented Design"
describes the book more precisely than the actual title does. It explains
how to find abstractions, how to design and describe them, and how to express
them in terms of an object-oriented programming language. The book focuses
on the decomposition of complex programs into smaller subproblems and on
organizing a large program system as a collection of well-chosen abstractions.&nbsp;</font></font>
<p><font face="Verdana, Helvetica, Arial, sans-serif"><font size=-1>The
programming language chosen for presenting the code samples is Java, incidentally.
For this reason, the book also gives an introduction to the main features
of Java. But it is by no means a typical Java textbook. You do not need
any previous Java knowledge in order to read, understand, or benefit from
this book. In fact, you can learn the basics of Java while improving your
knowledge of modular, object-oriented design.&nbsp;</font></font>
<p><font face="Verdana, Helvetica, Arial, sans-serif"><font size=-1>The
first chapters of the book focus on abstraction mechanisms. These chapters
discuss procedures and exceptions, data abstraction, iteration abstraction,
families of data abstractions, and polymorphic abstractions. It answers
such questions as, What exactly is an abstraction? How do we invent good
abstractions? How do we properly describe or specify an abstraction? How
do we implement an abstraction? How do we organize abstractions into families—that
is, into type hierarchies? (In the chapter on type hierarchies, you'll
find the substitution principle for subtype/supertype relations that carries
Barbara Liskov's name—known as LSP, the Liskov Substitution Principle.)&nbsp;</font></font>
<p><font face="Verdana, Helvetica, Arial, sans-serif"><font size=-1>The
second part of the book is devoted to "programming in the large"—that is,
design and implementation of complex systems in a modular way. The chapters
describe all stages of the development process from requirement analysis
over iterative program design to implementation and testing.&nbsp;</font></font>
<p><font face="Verdana, Helvetica, Arial, sans-serif"><font size=-1>A third
part (just one chapter) explains design patterns not covered earlier in
the book. It is a brief introduction to patterns and does not try to be
comprehensive. For a complete discussion of this material, other books
such as <i>Design Patterns</i> by Gamma et al. must be consulted.&nbsp;</font></font>
<p><font face="Verdana, Helvetica, Arial, sans-serif"><font size=-1><i>Program
Development in Java</i> is a remarkably well-organized and very readable
book. We particularly like its systematic approach. Here are a few examples
to illustrate what we mean:&nbsp;</font></font>
<ul>
<li>
<font face="Verdana, Helvetica, Arial, sans-serif"><font size=-1>Very early
in the book, Liskov and Guttag discuss the distinction between mutable
and immutable objects, an important issue that's far too often neglected
in class design, partly because Java is not the ideal language for expressing
the concept of (im)mutability.</font></font></li>

<br>&nbsp;
<li>
<font face="Verdana, Helvetica, Arial, sans-serif"><font size=-1>The section
on data abstractions classifies operations into four categories: creators
(produce new objects from scratch), producers (take other objects of the
same type as input for production of new objects), mutators (modify the
state of their object), and observers (provide information about the state
of their object). Experienced programmers often intuitively organize their
class declarations this way and Liskov &amp; Guttag provide the systematic
foundation for this habit.</font></font></li>

<br>&nbsp;
<li>
<font face="Verdana, Helvetica, Arial, sans-serif"><font size=-1>In the
section on exception handling, there is a clear classification of two possible
reactions to an exception: reflecting (propagating the exception up to
another level in the call stack) and masking (handling the exception and
continuation with normal control flow). Again, an important distinction.</font></font></li>

<br>&nbsp;
<li>
<font face="Verdana, Helvetica, Arial, sans-serif"><font size=-1>In the
section on type hierarchies there is a clear distinction between an object's
apparent type (the static type deduced at compile-time) and its actual
type (the dynamic type determined at run-time), which is fundamental for
a proper understanding of method dispatch.&nbsp;</font></font></li>
</ul>
<font face="Verdana, Helvetica, Arial, sans-serif"><font size=-1>Throughout
this book the terminology is crystal clear and is often summarized in sidebars.
Even so, the actual terms the authors choose are sometimes debatable. For
instance, it's not too common to talk of "reflecting an exception"; it's
more commonly called "propagation." Methods that they call "observers"
are often called "inspectors" in practice. Despite these potentially debatable
terms, the underlying principles are, without doubt, important in software
development and this book does a good job in clearly communicating them.&nbsp;</font></font>
<p><font face="Verdana, Helvetica, Arial, sans-serif"><font size=-1><i>Program
Development in Java: Abstraction, Specification, and Object-Oriented Design</i>
should be interesting reading to programmers who want to improve their
knowledge of object-oriented design and implementation, but we recommended
it equally to beginners who need to learn the principles of object-oriented
design and implementation from scratch. It is probably more useful to beginners
anyway, because much of the discussion in the "programming in the large"
part encompasses the basics of the development process, which a seasoned
practitioner would be familiar with.&nbsp;</font></font>
<p><i><font face="Verdana, Helvetica, Arial, sans-serif"><font size=-1><b>Angelika
Langer</b> develops and teaches classes on Java, C++, multithreading, and
internationalization. She is an internationally recognized speaker and
served on the ANSI/ISO C++ Committee from 1993 to 1998. <b>Klaus Kreft</b>
is a software architect and senior consultant with 15+ years of experience
in industrial software development. He currently works for Siemens Business
Services in Germany. Langer and Kreft are authors of "Standard C++ IOStreams
and Locales" (Addison-Wesley, 2000) and are columnists for the C/C++ Users
Journal.&nbsp;</font></font></i></td>
</tr>
</table></center>
&nbsp;</td>
</tr>
</table>

</body>
</html>
