<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
   <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
   <meta name="Generator" content="Microsoft Word 97">
   <meta name="GENERATOR" content="Mozilla/4.79 [en] (Windows NT 5.0; U) [Netscape]">
   <meta name="Author" content="Angelika Langer & Klaus Kreft">
   <title>Book Review  -  Practical Java</title>
</head>
<body text="#000000" bgcolor="#FFFFFF" link="#113E79" vlink="#677DAD" alink="#008080">
<a NAME="BookReviewPracticalJava"></a>
<table BORDER=0 CELLSPACING=0 CELLPADDING=0 WIDTH="489" >
<tr>
<td>&nbsp;</td>

<td>&nbsp;</td>

<td VALIGN=BOTTOM WIDTH="122"><img SRC="../../../Images/javazonesub.gif" NOSAVE height=33 width=122 align=LEFT></td>

<td WIDTH="50%">
<table BORDER=0 CELLSPACING=0 CELLPADDING=0 WIDTH="387" >
<tr>
<td VALIGN=BOTTOM WIDTH="300"><b><sub><font face="Verdana"><font color="#FF0037"><font size=+3>&nbsp;
Book Review</font></font></font></sub></b> <b><i><sub><font face="Verdana"><font color="#996666"><font size=+1>of
the week</font></font></font></sub></i></b></td>

<td ROWSPAN="2"><b><font face="Verdana"><font size=-2>&nbsp;</font></font></b></td>
</tr>

<tr>
<td VALIGN=BOTTOM WIDTH="387"><img SRC="../../../Images/javazonesubrule.gif" VSPACE=4 NOSAVE height=2 width=364></td>
</tr>
</table>
&nbsp;</td>
</tr>
</table>

<table BORDER=0 WIDTH="100%" >
<tr>
<td VALIGN=TOP WIDTH="10%">
<center><table BORDER=0 WIDTH="100%" >
<tr>
<td>&nbsp;</td>

<td VALIGN=TOP WIDTH="65"><img SRC="0201616467.gif" NOSAVE height=140 width=111></td>
</tr>

<tr>
<td>&nbsp;</td>

<td VALIGN=TOP WIDTH="65"><b><font face="Verdana"><font size=-2>Practical
Java Programming Language Guide&nbsp;</font></font></b></td>
</tr>

<tr>
<td>&nbsp;</td>

<td VALIGN=TOP WIDTH="65"><i><font face="Verdana"><font size=-2>By Peter
Haggar&nbsp;</font></font></i></td>
</tr>

<tr>
<td>&nbsp;</td>

<td VALIGN=TOP WIDTH="65"><font face="Verdana"><font size=-2>Reading,MA:Addison-Wesley
Longman&nbsp;</font></font></td>
</tr>

<tr>
<td>&nbsp;</td>

<td VALIGN=TOP WIDTH="65"><font face="Verdana"><font size=-2>ISBN 0201616467&nbsp;</font></font></td>
</tr>

<tr>
<td>&nbsp;</td>

<td VALIGN=TOP WIDTH="65"><font face="Verdana"><font size=-2>288 pages&nbsp;</font></font></td>
</tr>

<tr>
<td>&nbsp;</td>

<td VALIGN=TOP WIDTH="65"></td>
</tr>

<tr>
<td>&nbsp;</td>

<td VALIGN=TOP WIDTH="65"><font face="Verdana"><font size=-2>Price: $32.95&nbsp;</font></font></td>
</tr>

<tr>
<td></td>

<td><i><font face="Verdana"><font size=-2>(Reviewed 2/23/00)&nbsp;</font></font></i></td>
</tr>
</table></center>
&nbsp;</td>

<td VALIGN=TOP WIDTH="100%">
<center><table BORDER=0 WIDTH="90%" >
<tr>
<td VALIGN=TOP WIDTH="60%"><b><font face="Verdana"><font color="#006666"><font size=+2>Second-Generation
Java Title on Programming Idioms and Practical Tips&nbsp;</font></font></font></b></td>
</tr>

<tr>
<td WIDTH="60%"><i><font face="Verdana"><font size=-1>Goes beyond the language
features and JDK APIs</font></font></i></td>
</tr>

<tr>
<td VALIGN=TOP>
<br><font face="Verdana"><font color="#333399"><font size=+2>A</font></font><font size=-1>
second generation of Java books is showing up on bookstore shelves these
days. <i>Practical Java Programming Language Guide</i> by Peter Haggar
is one of them. Before we delve into the characteristics of this particular
book, let us explain what we mean by "second generation of Java books."&nbsp;</font></font>
<p><font face="Verdana"><font size=-1>The first generation of books were
published when Java was young and new to all of us in the IT business.
These early books covered elementary topics such as the concept and syntax
of the language, the API of its huge libraries, the ideas and intentions
that Sun was bringing into the language in cooperation with other companies.
While these books were, and still are, excellent reading when you need
to understand the various constructs and concepts of the language and its
API, none of these books aimed to explain Java's idioms or pointed out
the less obvious limitations of some concepts or discussed conceivable
workarounds. The reason for this is pretty obvious: at that time no one
had enough experience with Java to write such a book.&nbsp;</font></font>
<p><font face="Verdana"><font size=-1>Now that Java has been around for
quite a while (roughly five years), enough experience has been made and
enough know-how has been gathered so that a new generation of Java books
can be published these days. These new books present Java idioms and tips
culled from real-world use rather than serving simply as introductory text
books or Java primers. Resorting to C++ for an analogy, we'd say that Bjarne
Stroustrup's <i>C++ Programming Language</i> is a typical example of a
first-generation book, while Scott Meyers' <i>Effective C++</i> volumes
are examples of a second-generation book.&nbsp;</font></font>
<p><font face="Verdana"><font size=-1>By the way, the reference to Meyers'
books is on purpose. In the preface to his book, Haggar explains that the
style and structure of <i>Practical Java Programming Language Guide</i>
is strongly influenced by them; indeed, two of his Java tips are directly
inspired by corresponding C++ tips from Meyers.&nbsp;</font></font>
<p><font face="Verdana"><font size=-1>Following the tradition of <i>Effective
C++</i>, Haggar's book contains 68 design and implementation tips for Java,
named Praxis 1 through Praxis 68. Each tip is explained, often together
with source code, on one to ten pages (totaling 250+ pages). These "praxis"
tips are grouped into six blocks:&nbsp;</font></font>
<ol>
<li>
<font face="Verdana"><font size=-1>General Techniques</font></font></li>

<li>
<font face="Verdana"><font size=-1>Objects and Equality</font></font></li>

<li>
<font face="Verdana"><font size=-1>Exception Handling</font></font></li>

<li>
<font face="Verdana"><font size=-1>Performance</font></font></li>

<li>
<font face="Verdana"><font size=-1>Multithreading</font></font></li>

<li>
<font face="Verdana"><font size=-1>Classes and Interfaces</font></font></li>
</ol>
<font face="Verdana"><font size=-1>In addition to these tips the book contains
an index, an appendix with references to further reading (with a brief
description of each book or magazine), and the presentation of a learning
technique that was used in Peter Haggar's IBM lab when they learned C++
(he suggests using the same technique for learning Java).&nbsp;</font></font>
<p><font face="Verdana"><font size=-1>Let us take a look at the heart of
the book: namely the tips. All of them are helpful explanations of problems,
which a novice or seasoned Java programmer might not be aware of. Each
tip comes with a conceivable solution. An example is the tip "Never hide
an exception." It explains that the initial exception is hidden and error
information is lost when another exception is raised in the </font><tt><font size=+0>catch</font></tt><font size=-1>
or </font><tt><font size=+0>finally</font></tt><font size=-1> block that
is associated with the initial exception. The suggested solution is to
accumulate all occurring exceptions and propagate all of them (bundled
into one exception) from the </font><tt><font size=+0>finally</font></tt><font size=-1>
block.&nbsp;</font></font>
<p><font face="Verdana"><font size=-1>There are some caveats, however.
Despite the fact that Haggar's helpful tips are distilled from his actual
work with Java, <i>Practical Java Programming Language Guide</i> left us
a bit confused here and there. Our confusion has nothing to do with the
book as a whole. It simply seems strange to us that Java—heralded as the
next big programming language—needs a nine-page section (one of the longest
in the entire book) entitled "Optimize source code by hand" (Praxis 44).
In this section you're confronted with terms such as Constant Folding,
Loop Unrolling, etc.—terms familiar to every compiler builder, and that
no programmer should normally be concerned with. Another valid, yet unsettling,
rule is, "Do not rely on finalize methods for non-memory resource cleanup"
(Praxis 67). If so, what is the finalize method for? For unreliable non-memory
resource cleanup? It is not the author's fault that the reader might be
puzzled here; we came up with similar rules from our own experience with
Java. On a positive note, Haggar is fair enough to point out Java's dark
corners.&nbsp;</font></font>
<p><font face="Verdana"><font size=-1>The bottom line is this: <i>Practical
Java Programming Language Guide</i> is a very helpful book containing an
excellent collection of rules that reflect today's Java practice. We expect
that some time in the near future most of these "tips" will actually become
"rules" in programming guides for Java projects.&nbsp;</font></font>
<p><i><font face="Verdana"><font size=-1><b>Angelika Langer</b> develops
and teaches classes on advanced C++, STL, multithreading, internationalization,
and Java. She served on the ANSI/ISO C++ Committee from 1993 to 1998. <b>Klaus
Kreft</b> is a software architect and consultant with 15+ years of experience
in industrial software development. He works for Siemens Business Services
in Germany. Langer and Kreft are authors of "Standard C++ IOStreams and
Locales: Advanced Programmer's Guide and Reference" (Addison-Wesley, 1999)
and are columnists for <a href="http://www.creport.com/" target="_blank">C++
Report</a> magazine.&nbsp;</font></font></i></td>
</tr>
</table></center>
&nbsp;</td>
</tr>
</table>
<b><font face="Arial"><font size=-1>If</font></font></b>
<br>&nbsp;
</body>
</html>
