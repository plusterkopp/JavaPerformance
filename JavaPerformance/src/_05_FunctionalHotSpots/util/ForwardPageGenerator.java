/*
 * Created on 22.11.2003
 *
 */
package _05_FunctionalHotSpots.util;

import java.io.*;
import java.util.*;

import _05_FunctionalHotSpots.util.file.*;


/**
 * A generator for forwarding pages in order to avoid dead links.
 * A forwarding page replace a previously existing page to a new page.
 * The mapping is specified in a forwarding file.
 *
 * <p>Connects to the server, reads in the HTML file generated by the server
 * from a JSP, and writes the HTML file to the target location (as specified
 * in the forwarding file).
 *
 * usage: java [-D<option>=value] util.ForwardPageGenerator
 * available options:   forw=<forwarding file>
 * sample usage:        java -Dforw=D:/HomePageNew/HomepageGenerator/sources/forward.txt util.ForwardPageGenerator
 *
 * @see util.ForwardingDescription
 *
 * @author Angelika Langer
 */
public final class ForwardPageGenerator {
    private static ForwardDescription forwardDescr;
    private static int numberOfGeneratedPages = 0;
    private static int numberOfFilesWithoutForward = 0;
    private static int numberOfUnregisteredFiles = 0;

    private static Collection findObsoleteFiles() {
    	return FileUtility.directoryDifference(
    		forwardDescr.getHistoricDirectory(),
    		forwardDescr.getCurrentDirectory()
    	       );
    }
    private static void generatePage(Reader source, Writer target) {
        FileUtility.copyCharacterFile(source,target);
    }

    private static void generateForwardPages(Collection fileNames) {
    	Iterator iter = fileNames.iterator();
    	while (iter.hasNext()) {
    		String historicFileName = (String)iter.next();
    		String pageName = forwardDescr.getSymbolicPagenameForHistoricFilename(historicFileName);
    		if (pageName == null) {
			System.out.println(">>> note: no forwarding for  "+historicFileName);
			numberOfUnregisteredFiles++;
		}
		else if (!forwardDescr.hasCurrentCounterpart(pageName)) {
			numberOfFilesWithoutForward++;
		}
   		else {
   			System.out.println("generated page: "+historicFileName);
    			// Get reader and writer for input and output.
			BufferedReader content = GeneratorInput.getInputReader(pageName);
			PrintWriter output = new ForwardingOutput().getOutputWriter(pageName);

			// The actual page generation process.
			generatePage(content, output);
			numberOfGeneratedPages++;
		}
    	}
    }


    public static void main(String[] args) {
    	// Load the forwarding description.
	ForwardDescription.makeForwardDescription(args);
	forwardDescr = ForwardDescription.getForwardDescription();

	// Retrieve a list of HTML file names for which a forwarding page must be generated.
	Collection obsoleteHtmlFileNames = findObsoleteFiles();

	// Generate forwarding pages.
    	generateForwardPages(obsoleteHtmlFileNames);

	// Print statistics.
	System.out.println("\n-- FORWARD PAGE GENERATION --\n");
	System.out.println("\n-- statistics for obsolete file detection --");
	System.out.println("number of obsolete files           : "+obsoleteHtmlFileNames.size());
	System.out.println("number of generated forward pages  : "+numberOfGeneratedPages);
	System.out.println("number of pages without forwarding : "+numberOfFilesWithoutForward);
	System.out.println("number of unregistered pages       : "+numberOfUnregisteredFiles);

    }
}
